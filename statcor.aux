\relax 
\@writefile{toc}{\contentsline {section}{\numberline {4}Static Semantics for the Core}{16}}
\newlabel{statcor.sec}{{4}{16}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Simple Objects}{16}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Simple Semantic Objects}}{16}}
\newlabel{simple-objects}{{9}{16}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Compound Objects}{16}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{The restriction of a map $f$ by a set $S$, written $f \setminus S$ is defined to be}}{17}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{f \setminus S = \{x \mapstochar \rightarrow f(s); x\in \mathop {\rm  Dom}\nolimits f \setminus S\}}}{17}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces Compound Semantic Objects}}{17}}
\newlabel{compound-objects}{{10}{17}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Projection, Injection and Modification}{18}}
\newlabel{stat-proj}{{4.3}{18}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Types and Type functions}{18}}
\newlabel{tyfun-sec}{{4.4}{18}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{or $(tau')\unhbox \voidb@x \hbox {\tt  array}$}}{18}}
\newlabel{tyfcn-lab}{{4.4}{18}}
\newlabel{imp-ty-lab}{{4.4}{19}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.5}Type Schemes}{19}}
\newlabel{type-scheme-sec}{{4.5}{19}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.6}Scope of Explicit Type Variables}{19}}
\newlabel{scope-sec}{{4.6}{19}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{$\delimiter "426830A {\tt  rec}\delimiter "526930B $}}{19}}
\newlabel{scope-def-lab}{{4.6}{19}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.7}Non-expansive Expressions}{20}}
\newlabel{expansive-sec}{{4.7}{20}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\hbox {\tt  ...}\ \hbox {\tt  =}\ {\it  nexp}}}{20}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.8}Closure}{20}}
\newlabel{closure-sec}{{4.8}{20}}
\newlabel{clos-def-lab}{{4.8}{21}}
\@writefile{loc}{\contentsline {subsection}{Replaced\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{${\it  pat}$ is exhaustive and }}{21}}
\@writefile{loc}{\contentsline {subsection}{Replaced\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{otherwise }}{21}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{Where a pattern is said to be {\sl  exhaustive} if it matches all possible values of its type (cf.\ Section\nobreakspace  {}4.11\hbox {}). Since whether a nested match matches a value is undecidable in general, we classify any pattern involving a nested match as non-exhaustive.}}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.9}Type Structures and Type Environments}{21}}
\newlabel{typeenv-wf-sec}{{4.9}{21}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{For any $\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$}$ of the form}}{21}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$}=\{{\it  tycon}_i\mapstochar \rightarrow (t_i,\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_i)\ ;\ 1\leq i\leq k\},}}{21}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{where no $\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_i$ is the empty map, and for any $E$ we define $\mathop {\rm  Abs}\nolimits (\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$},E)$ to be the environment obtained from $E$ and $\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$}$ as follows. First, let $\mathop {\rm  Abs}\nolimits (\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$})$ be the type environment}}{21}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{$\{{\it  tycon}_i \mapstochar \rightarrow (t_i,\{\})\ ;\ 1\leq i\leq k\}$ in which all value environments $\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_i$ have been replaced by the empty map. Let $t_1',\unhbox \voidb@x \hbox {$\cdot \mskip -\thinmuskip \cdot \mskip -\thinmuskip \cdot $},t_k'$ be new distinct type names none of which admit equality. Then $\mathop {\rm  Abs}\nolimits (\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$},E)$ is the result of simultaneously substituting $t_i'$ for $t_i$, $1\leq i\leq k$, throughout $\mathop {\rm  Abs}\nolimits (\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$})+E$. (The effect of the latter substitution is to ensure that the use of equality on an ${\tt  abstype}$ is restricted to the ${\tt  with}$ part.)}}{21}}
\newlabel{abs-lab}{{4.9}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.10}Inference Rules}{22}}
\newlabel{stat-cor-inf-rules}{{4.10}{22}}
\newlabel{sconexp-rule}{{1}{22}}
\newlabel{varexp-rule}{{2}{22}}
\newlabel{let-rule}{{4}{22}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{{\it  lab}\not \in \mathop {\rm  Dom}\nolimits \varrho }}{23}}
\newlabel{atexp-rule}{{\unhbox \voidb@x \hbox {7}}{23}}
\newlabel{typedexp-rule}{{\unhbox \voidb@x \hbox {9}}{23}}
\newlabel{raiseexp-rule}{{\unhbox \voidb@x \hbox {11}}{23}}
\newlabel{mrule-rule}{{\unhbox \voidb@x \hbox {14}}{24}}
\newlabel{valdec-rule}{{\unhbox \voidb@x \hbox {15}}{24}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\delimiter "426830A \mathop {\rm  tynames}\nolimits \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}\subseteq T \mathbin {\rm  of} C \delimiter "526930B }}{24}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\delimiter "426830A \,\forall {\it  vid}\in \mathop {\rm  Dom}\nolimits \ \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\,\unhbox \voidb@x \hbox {either ${\it  vid}\not \in \mathop {\rm  Dom}\nolimits \ C$ or $\hbox {\it  is} \mathbin {\rm  of} C = \hbox {\tt  v}$}\,\delimiter "526930B }}{24}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\delimiter "426830A +\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}\delimiter "526930B }}{24}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{$\delimiter "426830A $rec$\delimiter "526930B $}}{24}}
\newlabel{datatypedec-rule}{{\unhbox \voidb@x \hbox {17}}{24}}
\newlabel{datatyperepldec-rule}{{\unhbox \voidb@x \hbox {18}}{24}}
\newlabel{abstypedec-rule}{{\unhbox \voidb@x \hbox {19}}{24}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\oplus \unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$}\vdash {\it  datbind\/}\Rightarrow \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$}}}{24}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\forall (t,\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}')\in \mathop {\rm  Ran}\nolimits \unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$},\ t\notin  (T \mathbin {\rm  of} C)}}{24}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\oplus (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$})\vdash {\it  dec}\Rightarrow E}}{24}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{$\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$}$ maximises equality}}{24}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash \unhbox \voidb@x \hbox {{\tt  abstype}\ {\it  datbind\/}\ {\tt  with}\ {\it  dec}\ {\tt  end}}\Rightarrow \mathop {\rm  Abs}\nolimits (\unhbox \voidb@x \hbox {$T\mskip -\thinmuskip E$},E)}}{24}}
\newlabel{exceptiondec-rule}{{\unhbox \voidb@x \hbox {20}}{24}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{Modifying $C$ by $\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}$ on the left captures the recursive nature of the binding. From rule\nobreakspace  {}\unhbox \voidb@x \hbox {25}\hbox {} we see that any type scheme occurring in $\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}$ will have to be a type. Thus each use of a recursive function in its own body must be assigned the same type. The side condition on the value identifiers in $C$ ensures that $C + \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}$ does not overwrite identifier status in the recursive case. For example, the program}}{25}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{{\tt  datatype t = f; val rec f = fn x => x;}}}{25}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{is not legal.}}{25}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{,(\unhbox \voidb@x \hbox {19}\hbox {}}}{25}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{(\unhbox \voidb@x \hbox {19}\hbox {})}}{25}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{The $\mathop {\rm  Abs}\nolimits $ operation was defined in Section\nobreakspace  {}4.9\hbox {}, page\nobreakspace  {}21\hbox {}.}}{25}}
\newlabel{valbind-rule}{{\unhbox \voidb@x \hbox {25}}{26}}
\newlabel{recvalbind-rule}{{\unhbox \voidb@x \hbox {26}}{26}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C+\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}\vdash {\it  valbind}\Rightarrow \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}\hskip 2em\relax \mathop {\rm  tynames}\nolimits \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}\subseteq T \mathbin {\rm  of} C}}{26}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash \unhbox \voidb@x \hbox {{\tt  rec}\ {\it  valbind}}\Rightarrow \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}}}{26}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{(\unhbox \voidb@x \hbox {26}\hbox {})}}{26}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{Modifying $C$ by $\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}$ on the left captures the recursive nature of the binding. From rule\nobreakspace  {}\unhbox \voidb@x \hbox {25}\hbox {} we see that any type scheme occurring in $\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}$ will have to be a type. Thus each use of a recursive function in its own body must be assigned the same type. Also note that $C+\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}$ may overwrite identifier status. For example, the program {\tt  datatype t = f; val rec f = fn x => x;}\nobreakspace  {}\nobreakspace  {} is legal.}}{26}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(FixSML): \truncate {.3\textwidth }{)}}{26}}
\newlabel{exnbind1-rule}{{\unhbox \voidb@x \hbox {30}}{27}}
\newlabel{exnbind2-rule}{{\unhbox \voidb@x \hbox {31}}{27}}
\newlabel{varpat-rule}{{\unhbox \voidb@x \hbox {34}}{27}}
\newlabel{constpat-rule}{{\unhbox \voidb@x \hbox {35}}{27}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash {\it  pat}\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\varrho \ \unhbox \voidb@x \hbox {\rm  in}\ {\rm  Type})}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\ {\tt  =} {\it  pat}}}{28}}
\@writefile{loc}{\contentsline {subsection}{Replaced\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}\ }}{28}}
\newlabel{longlab-rule}{{\unhbox \voidb@x \hbox {39}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{+\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{{\it  lab}\not \in \mathop {\rm  Dom}\nolimits \varrho }}{28}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{(\unhbox \voidb@x \hbox {39}\hbox {})}}{28}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{The syntactic restrictions ensure ${\it  lab}\notin  \mathop {\rm  Dom}\nolimits \varrho $.}}{28}}
\newlabel{layeredpat-rule}{{\unhbox \voidb@x \hbox {43}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash {\it  pat}_1\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1,\tau ) \hskip 2em\relax C + \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1\vdash {\it  pat}_2\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_2,\tau ) \hskip 2em\relax \mathop {\rm  Dom}\nolimits \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_0\cap \mathop {\rm  Dom}\nolimits \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1 = \emptyset }}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash \unhbox \voidb@x \hbox {${\it  pat}_1$\ {\tt  as}\ ${\it  pat}_2$}\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1 + \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_2,\tau )}}{28}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\hbox {${\it  vid}\notin  \mathop {\rm  Dom}\nolimits (C)$ or $\hbox {\it  is} \mathbin {\rm  of} C({\it  vid}) = \hbox {\tt  v}$}}}{28}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\delimiter "426830A C\vdash {\it  ty}\Rightarrow \tau \delimiter "526930B \hskip 2em\relax C\vdash {\it  pat}\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\tau )\hskip 2em\relax {\it  vid}\notin  \mathop {\rm  Dom}\nolimits \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}}}{28}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash \unhbox \voidb@x \hbox {{\it  vid}$\delimiter "426830A ${\tt  :} {\it  ty}$\delimiter "526930B $ {\tt  as}\ {\it  pat}}\Rightarrow (\{{\it  vid}\mapstochar \rightarrow (\tau ,\hbox {\tt  v})\} + \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\tau )}}{28}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{43}}{28}}
\newlabel{orpat-rule}{{\unhbox \voidb@x \hbox {\leavevmode {\color  {magenta}43a}}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash {\it  pat}_1\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\tau ) \hskip 2em\relax C\vdash {\it  pat}_2\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\tau )}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash \unhbox \voidb@x \hbox {${\it  pat}_1$\ {\tt  |}\ ${\it  pat}_2$}\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$},\tau )}}{28}}
\newlabel{nestedmatch-rule}{{\unhbox \voidb@x \hbox {\leavevmode {\color  {magenta}43b}}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash {\it  pat}_1\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1,\tau )}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C + \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1\vdash {\it  exp}\Rightarrow \tau '}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C + \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1\vdash {\it  pat}_2\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_2,\tau ')}}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{\mathop {\rm  Dom}\nolimits \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1\cap \mathop {\rm  Dom}\nolimits \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_2=\emptyset }}{28}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{C\vdash \unhbox \voidb@x \hbox {${\it  pat}_1$\ {\tt  with}\ ${\it  pat}_2$\ {\tt  =}\ {\it  exp}}\Rightarrow (\unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_1 + \unhbox \voidb@x \hbox {$V\mskip -\thinmuskip E$}_2,\tau )}}{28}}
\newlabel{constype-rule}{{\unhbox \voidb@x \hbox {46}}{29}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{{\it  lab}\not \in \mathop {\rm  Dom}\nolimits \varrho }}{29}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{{\it  Comment:\ }The syntactic constraints ensure ${\it  lab}\notin  \mathop {\rm  Dom}\nolimits \varrho $.}}{29}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.11}Further Restrictions}{29}}
\newlabel{further-restrictions-sec}{{4.11}{29}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(FixSML): \truncate {.3\textwidth }{For each occurrence of a record expression containing ellipses, i.e., of the form \unhbox \voidb@x \hbox {\tt  \char '173}${\it  lab}_1${\tt  =}${\it  exp}_1${\tt  ,} $\unhbox \voidb@x \hbox {$\cdot \mskip -\thinmuskip \cdot \mskip -\thinmuskip \cdot $}${\tt  ,} ${\it  lab}_m${\tt  =}${\it  exp}_m${\tt  ,...=}${\it  exp}_0$\unhbox \voidb@x \hbox {\tt  \char '175}\ the program context consisting of the smallest enclosing declaration must determine uniquely the domain $\{{\it  lab}_1,\unhbox \voidb@x \hbox {$\cdot \mskip -\thinmuskip \cdot \mskip -\thinmuskip \cdot $},{\it  lab}_n\}$ of its row type, where $m\leq n$; thus, the context must determine the labels $\{{\it  lab}_{m+1},\unhbox \voidb@x \hbox {$\cdot \mskip -\thinmuskip \cdot \mskip -\thinmuskip \cdot $},{\it  lab}_n\}$ of the fields of ${\it  exp}_0$. Likewise for record patterns that contain ellipses. In these situations, an explicit type constraint may be needed. }}{29}}
\@writefile{loc}{\contentsline {subsection}{Deleted\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{ For each occurrence of a record pattern containing a record wildcard, i.e., of the form \unhbox \voidb@x \hbox {\tt  \char '173}${\it  lab}_1${\tt  =}${\it  pat}_1${\tt  ,}$\unhbox \voidb@x \hbox {$\cdot \mskip -\thinmuskip \cdot \mskip -\thinmuskip \cdot $}${\tt  ,}${\it  lab}_m${\tt  =}${\it  pat}_m${\tt  ,...}\unhbox \voidb@x \hbox {\tt  \char '175}\ the program context must determine uniquely the domain $\{{\it  lab}_1,\unhbox \voidb@x \hbox {$\cdot \mskip -\thinmuskip \cdot \mskip -\thinmuskip \cdot $},{\it  lab}_n\}$ of its row type, where $m\leq n$; thus, the context must determine the labels $\{{\it  lab}_{m+1},\unhbox \voidb@x \hbox {$\cdot \mskip -\thinmuskip \cdot \mskip -\thinmuskip \cdot $},{\it  lab}_n\}$ of the fields to be matched by the wildcard. For this purpose, an explicit type constraint may be needed. }}{30}}
\newlabel{irredundant-pat-restriction}{{2}{30}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{For the purposes of checking exhaustiveness, any contained nested match ``$\unhbox \voidb@x \hbox {${\it  pat}_1$\ {\tt  with}\ ${\it  pat}_2$\ {\tt  =}\ {\it  exp}}$'' may be assumed to fail, unless ${\it  pat}_2$ is exhaustive itself. Furthermore, note that ${\it  exp}$ may contain side effects that could alter the contents of any ref cells being matched against. }}{30}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{A disjunctive pattern of the form ``$\unhbox \voidb@x \hbox {${\it  pat}_1$\ {\tt  |}\ ${\it  pat}_2$}$ should be {\sl  irredundant}; that is, ${\it  pat}_2$ should match some value not matched by ${\it  pat}_1$. As in 2\hbox {} above, a pattern that contains a guard may be assumed to possibly fail. }}{30}}
\@writefile{loc}{\contentsline {subsection}{Added\nobreakspace  {}(SuccML): \truncate {.3\textwidth }{Every pattern of the form ``$\unhbox \voidb@x \hbox {${\it  pat}_1$\ {\tt  as}\ ${\it  pat}_2$}$'' must be consistent; i.e., there must exist at least one value that is matched by both ${\it  pat}_1$ and ${\it  pat}_2$.}}{30}}
\@setckpt{statcor}{
\setcounter{page}{31}
\setcounter{equation}{49}
\setcounter{enumi}{5}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{1}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{section}{4}
\setcounter{subsection}{11}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{10}
\setcounter{table}{0}
\setcounter{changeno}{132}
\setcounter{fixtypos}{1}
\setcounter{noimptypes}{1}
\setcounter{typabbr}{1}
\setcounter{nostrsharing}{1}
\setcounter{newpreface}{1}
\setcounter{noinfixinspec}{1}
\setcounter{nofuncspec}{1}
\setcounter{noeqtypespec}{1}
\setcounter{nolocalspec}{1}
\setcounter{library}{1}
\setcounter{ce}{1}
\setcounter{noopenspec}{1}
\setcounter{noclosurerestriction}{1}
\setcounter{notypexplication}{1}
\setcounter{singleincludespec}{1}
\setcounter{idstatus}{1}
\setcounter{infixassociativity}{1}
\setcounter{explicittyvars}{1}
\setcounter{constructors}{1}
\setcounter{comments}{1}
\setcounter{commentary}{1}
\setcounter{safelet}{1}
\setcounter{principalenv}{1}
\setcounter{scon}{1}
\setcounter{datatyperepl}{1}
\setcounter{marginalnote}{0}
\setcounter{Changes@AuthorCount}{3}
\setcounter{Changes@Author}{3}
\setcounter{Changes@AddCount}{0}
\setcounter{Changes@DeleteCount}{0}
\setcounter{Changes@ReplaceCount}{0}
\setcounter{Changes@AddCountFixSML}{10}
\setcounter{Changes@DeleteCountFixSML}{0}
\setcounter{Changes@ReplaceCountFixSML}{0}
\setcounter{Changes@AddCountSuccML}{60}
\setcounter{Changes@DeleteCountSuccML}{32}
\setcounter{Changes@ReplaceCountSuccML}{12}
\setcounter{saveeqn}{49}
}
